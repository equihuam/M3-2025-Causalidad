{
  "hash": "cdad9cf34ce3f3e6d577818c63d04ff1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Modelos anidados\"\nauthor: [\"Miguel Equihua\", \"Elio Lagunes\"]\ndate: \"2024-02-06\"\nlang: es\ndraft: false\ncategories: [clase]\nformat:\n  html:\n    code-fold: true\n---\n\n\n\n\n![](ratas-de-lab.png){width=\"500\"}\n\n# Diseños con multiples niveles de unidades experimentales\n\nHay situaciones en las que un estudio requiere considerar unidades experimentales múltiples. Por ejemplo, si estamos haciendo un estudio en parcelas forestales y las parcelas son sujetas a tratamientos, claramente esas parcelas son las unidades experimentales de primera mano.\n\nSin embargo, imaginemos que la variable de respuesta es el contenido de nitrógeno en el suelo, Es poco práctico recolectar la totalidad del suelo hasta, digamos 15cm de profundidad de cada parcela para determinar el contenido de nitrógeno en el suelo de toda la parcela.\n\n::: {.callout-caution title=\"¿Qué opciones tenemos?\" collapse=\"true\"}\n[![](images/june16-2015-pg-aerial.jpg){height=400px}](https://www.nature.com/articles/nature16444)\n\nExiste ayyuda en R para el diseño de experimentos, como podemos ver en [este preprint](https://arxiv.org/pdf/2311.09705.pdf)\n\n:::\n\nLa opción natural sería en este caso *tomar una muestra de suelo* en cada parcela, y hacer las determinaciones de contenido de nitrógeno en ellas. Al hacer esto, no conoceremos el contenido de nitrógeno de las parcelas, lo estimaremos con un margen de error, es decir con un componente de varianza asociado con el procedimiento de muestreo. Las muestras son lo que podríamos llamar *unidades experimentales pequeñas* que, además del efecto del tratamiento son afectadas por el procedimiento de muestreo como factor adicional.\n\nOtra situación es, por ejemplo, un experimento sobre el efecto del cambio climático sobre la fotosíntesis de árboles sujetos a distintos niveles de fertilizante. La situación se complica porque lo que interesa es saber si el incremento en la temperatura afecta el contenido de nitrógeno en las hojas, para lo cual se opta por hacerlo mediante un muestreo en el que se eligen ramas en cada árbol para exponerlas a una atmósfera a temperaturas controladas. ¿Cuantas hojas habríamos de utilizar para hacer las determinaciones confiablemente?\n\nLos árboles son unidades experimentales *grandes* tratadas con fertilizante y las ramas son unidades experimentales *chicas* que reciben el tratamiento factorial *fertilizante* + *temperatura*. Además hay que notar que muy probablemente hay un efecto \"idiosincrático\" del árbol que genera variación en el comportamiento de las ramas.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dagitty)\nparcela_dividida <- dagitty('dag{bb=\"0,0,1,1\"\n                                 \"aleat-1\" [latent,pos=\"0.4, 0.2\"]\n                                 \"aleat-2\" [latent,pos=\"0.6, 0.2\"]\n                                 \"árbol\" [pos=\"0.4, 0.3\"]\n                                 fert [exposure,pos=\"0.2, 0.3\"]\n                                 hojasN [outcome,pos=\"0.8, 0.3\"]\n                                 rama [pos=\"0.6, 0.3\"]\n                                 temp [exposure,pos=\"0.6, 0.4\"]\n                                 \"aleat-1\" -> \"árbol\"\n                                 \"aleat-2\" -> rama\n                                 \"árbol\" -> rama\n                                 fert -> \"árbol\"\n                                 rama -> hojasN\n                                 temp -> rama}')\npar(cex = 0.75, lwd  = 1)\nplot(parcela_dividida)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/dag_árbol-1.png){width=192}\n:::\n:::\n\n\n\n\n## Ejemplo: Control del glucógeno en hígados de rata\n\nEste ejemplo presentado originalmente en Sokal & Rohlf (1981). Se trata de un experimento con un solo factor con tres dietas: 1 = \"control\", 2 = \"compuesto 217\", 3 = \"compuesto 217 + azúcar\". Fueron administrados a seis ratas, dos por tratamiento. El análisis se complica por el hecho de que, para el análisis, se tomaron tres muestras del hígado de cada rata y se hicieron dos determinaciones de contenido de glucógeno en cada muestra. Así, hay seis *parcelas chicas* (lo que a algunos les gusta llamar *pseudorréplicas*) en cada rata, para finalmente dar 36 lecturas en total.\n\n\n[Datos del experimento](https://drive.google.com/file/d/1NYuQYRR-ZKy_wlqylIHk_W6wKN10LoHy/view?usp=sharing)\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglucog_rata <- dagitty('dag {bb=\"-5,-5, 5, 5\"\n                             trat [exposure, pos=\"-4, 0\"]\n                             rat  [pos=\"-2, 0\"]\n                             hig  [pos=\"0, 0\"]\n                             mues [pos=\"2, 0\"]\n                             gluc [outcome, pos=\"4, 0\"]\n                             hig -> mues\n                             mues -> gluc\n                             rat -> hig\n                             trat -> rat}')\n\n\npar(cex = 1, lwd  = 1)\nplot(glucog_rata)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/dag_ratas-1.png){width=384}\n:::\n:::\n\n\n\n\nArreglé el código para incorporar la versión con la *tubo-metáfora*. haciendo esto me encontré [este artículo quejoso al respecto](https://www.datanalytics.com/2017/05/16/soy-un-dinosaurio-sobre-las-novedades-de-r/). Ni modo, comparto algo del punto de vista de ese autor.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nratas <- as_tibble(read.table(\"hígados-rata.DAT\",                 \n                    col.names=\"glucogeno\"))\n\nratas <- ratas %>% \n               mutate(tratamiento = factor(rep(1:3,each=12), levels=c(1:3)),\n                      rata = factor(rep(1:2,times=3, each=6), levels=c(1,2)),\n                      muestraH = factor(rep(1:3,times=6, each=2), levels=c(1:3)))\n\nhead(ratas)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  glucogeno tratamiento rata  muestraH\n      <int> <fct>       <fct> <fct>   \n1       131 1           1     1       \n2       130 1           1     1       \n3       131 1           1     2       \n4       125 1           1     2       \n5       136 1           1     3       \n6       142 1           1     3       \n```\n\n\n:::\n:::\n\n\n\n\n## inspección de los datos\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntapply (ratas$glucogeno, list(ratas$tratamiento), mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       1        2        3 \n140.5000 151.0000 135.1667 \n```\n\n\n:::\n:::\n\n\n\n\nQuizás es mala idea etiquetar a los factores en forma numérica cuando hay la posibilidad de darles un nombre que nos facilite interpretar los resultados, especialmente para los efectos fijos. Cambiemos eso para los tratamientos. Hay varias formas de hacer esto, unas más seguras que otras, pero en este caso el cambio es muy sencillo y lo podemos hacer con suficiente seguridad como lo hemos venido haciendo con la función `levels`. Pero para atender casos más complejos sugiero usar la biblioteca **tidyverse** así.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nratas <- ratas %>% mutate(trat_txt=recode(tratamiento, \n                                          \"1\"=\"trat_1\", \n                                          \"2\"=\"trat_2\", \n                                          \"3\"=\"trat_3\"))\n\nhead(ratas)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  glucogeno tratamiento rata  muestraH trat_txt\n      <int> <fct>       <fct> <fct>    <fct>   \n1       131 1           1     1        trat_1  \n2       130 1           1     1        trat_1  \n3       131 1           1     2        trat_1  \n4       125 1           1     2        trat_1  \n5       136 1           1     3        trat_1  \n6       142 1           1     3        trat_1  \n```\n\n\n:::\n:::\n\n\n\n\n## Ajuste de modelo\n\nEn este caso tengo una estructura anidada, así que podemos usar el operador de anidación `%in%`. Sin embargo, hay que tener cuidado, pues esto sólo añade el efecto de anidamiento especificado, no los términos principales u otros niveles de anidamiento que pudieran estar presentes. También hay que notar que un anidamiento equivale en el *modelo estadístico lineal* a la presencia de términos de interacción sin su contraparte de términos en la jerarquía. En este caso, no aparece ninguna interacción tratamiento:rata o tratamiento:muestraHígado, etc., pero sí aparecen las interacciones más complejas: rata:muestraHígado:tratamiento por ejemplo.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nratas.completo <- lm(glucogeno ~ trat_txt + rata %in% trat_txt + muestraH %in% rata %in% trat_txt, data=ratas)\nsummary(ratas.completo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = glucogeno ~ trat_txt + rata %in% trat_txt + muestraH %in% \n    rata %in% trat_txt, data = ratas)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n -6.00  -2.25   0.00   2.25   6.00 \n\nCoefficients:\n                               Estimate Std. Error t value Pr(>|t|)    \n(Intercept)                     130.500      3.253  40.114  < 2e-16 ***\ntrat_txttrat_2                   20.500      4.601   4.456 0.000305 ***\ntrat_txttrat_3                   -1.000      4.601  -0.217 0.830375    \ntrat_txttrat_1:rata2             18.500      4.601   4.021 0.000801 ***\ntrat_txttrat_2:rata2              2.000      4.601   0.435 0.668937    \ntrat_txttrat_3:rata2              9.500      4.601   2.065 0.053645 .  \ntrat_txttrat_1:rata1:muestraH2   -2.500      4.601  -0.543 0.593526    \ntrat_txttrat_2:rata1:muestraH2   -3.000      4.601  -0.652 0.522595    \ntrat_txttrat_3:rata1:muestraH2    8.500      4.601   1.848 0.081172 .  \ntrat_txttrat_1:rata2:muestraH2   -7.500      4.601  -1.630 0.120438    \ntrat_txttrat_2:rata2:muestraH2   -6.000      4.601  -1.304 0.208616    \ntrat_txttrat_3:rata2:muestraH2   -0.500      4.601  -0.109 0.914660    \ntrat_txttrat_1:rata1:muestraH3    8.500      4.601   1.848 0.081172 .  \ntrat_txttrat_2:rata1:muestraH3   -1.000      4.601  -0.217 0.830375    \ntrat_txttrat_3:rata1:muestraH3    6.000      4.601   1.304 0.208616    \ntrat_txttrat_1:rata2:muestraH3    6.000      4.601   1.304 0.208616    \ntrat_txttrat_2:rata2:muestraH3    4.000      4.601   0.869 0.396059    \ntrat_txttrat_3:rata2:muestraH3   -8.500      4.601  -1.848 0.081172 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.601 on 18 degrees of freedom\nMultiple R-squared:  0.8856,\tAdjusted R-squared:  0.7775 \nF-statistic: 8.196 on 17 and 18 DF,  p-value: 2.508e-05\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#tapply (ratas$glucogeno, list(ratas$trat_txt), mean)\nratas %>% group_by(trat_txt) %>% summarise(media = mean(glucogeno))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  trat_txt media\n  <fct>    <dbl>\n1 trat_1    140.\n2 trat_2    151 \n3 trat_3    135.\n```\n\n\n:::\n\n```{.r .cell-code}\nanova(ratas.completo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnalysis of Variance Table\n\nResponse: glucogeno\n                       Df  Sum Sq Mean Sq F value    Pr(>F)    \ntrat_txt                2 1557.56  778.78 36.7927 4.375e-07 ***\ntrat_txt:rata           3  797.67  265.89 12.5617 0.0001143 ***\ntrat_txt:rata:muestraH 12  594.00   49.50  2.3386 0.0502907 .  \nResiduals              18  381.00   21.17                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n\n\n\n:::{.callout-tip title=\"¿Cómo interpretas estos resultados?\"}\nRecuerda que las pruebas omnibus del ANOVA de arriba sólo tienen sentido en cuanto a *comparación de medias*, para los términos de *efectos fijos*.\n:::\n\nConviene saber que hay muchas maneras de hacer lo mismo en **R**. esta es otra forma de lograr exactamente lo mismo, pero utilizando otra notación en la forma de escribir las ecuaciones al utilizar la función de ajuste de modelos lineales.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nratas.nulo <- lm(glucogeno~1, data=ratas)\nratas.completo <- lm(glucogeno ~ trat_txt/rata/muestraH, data=ratas)\nanova(ratas.completo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnalysis of Variance Table\n\nResponse: glucogeno\n                       Df  Sum Sq Mean Sq F value    Pr(>F)    \ntrat_txt                2 1557.56  778.78 36.7927 4.375e-07 ***\ntrat_txt:rata           3  797.67  265.89 12.5617 0.0001143 ***\ntrat_txt:rata:muestraH 12  594.00   49.50  2.3386 0.0502907 .  \nResiduals              18  381.00   21.17                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(ratas.completo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = glucogeno ~ trat_txt/rata/muestraH, data = ratas)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n -6.00  -2.25   0.00   2.25   6.00 \n\nCoefficients:\n                               Estimate Std. Error t value Pr(>|t|)    \n(Intercept)                     130.500      3.253  40.114  < 2e-16 ***\ntrat_txttrat_2                   20.500      4.601   4.456 0.000305 ***\ntrat_txttrat_3                   -1.000      4.601  -0.217 0.830375    \ntrat_txttrat_1:rata2             18.500      4.601   4.021 0.000801 ***\ntrat_txttrat_2:rata2              2.000      4.601   0.435 0.668937    \ntrat_txttrat_3:rata2              9.500      4.601   2.065 0.053645 .  \ntrat_txttrat_1:rata1:muestraH2   -2.500      4.601  -0.543 0.593526    \ntrat_txttrat_2:rata1:muestraH2   -3.000      4.601  -0.652 0.522595    \ntrat_txttrat_3:rata1:muestraH2    8.500      4.601   1.848 0.081172 .  \ntrat_txttrat_1:rata2:muestraH2   -7.500      4.601  -1.630 0.120438    \ntrat_txttrat_2:rata2:muestraH2   -6.000      4.601  -1.304 0.208616    \ntrat_txttrat_3:rata2:muestraH2   -0.500      4.601  -0.109 0.914660    \ntrat_txttrat_1:rata1:muestraH3    8.500      4.601   1.848 0.081172 .  \ntrat_txttrat_2:rata1:muestraH3   -1.000      4.601  -0.217 0.830375    \ntrat_txttrat_3:rata1:muestraH3    6.000      4.601   1.304 0.208616    \ntrat_txttrat_1:rata2:muestraH3    6.000      4.601   1.304 0.208616    \ntrat_txttrat_2:rata2:muestraH3    4.000      4.601   0.869 0.396059    \ntrat_txttrat_3:rata2:muestraH3   -8.500      4.601  -1.848 0.081172 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.601 on 18 degrees of freedom\nMultiple R-squared:  0.8856,\tAdjusted R-squared:  0.7775 \nF-statistic: 8.196 on 17 and 18 DF,  p-value: 2.508e-05\n```\n\n\n:::\n:::\n\n\n\n\nuso de la función de análisis de la varianza de **R**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nratas.aov <- aov(glucogeno ~ tratamiento/rata/muestraH, data=ratas)\nsummary(ratas.aov)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                          Df Sum Sq Mean Sq F value   Pr(>F)    \ntratamiento                2 1557.6   778.8  36.793 4.38e-07 ***\ntratamiento:rata           3  797.7   265.9  12.562 0.000114 ***\ntratamiento:rata:muestraH 12  594.0    49.5   2.339 0.050291 .  \nResiduals                 18  381.0    21.2                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n\n```{.r .cell-code}\nanova(ratas.completo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnalysis of Variance Table\n\nResponse: glucogeno\n                       Df  Sum Sq Mean Sq F value    Pr(>F)    \ntrat_txt                2 1557.56  778.78 36.7927 4.375e-07 ***\ntrat_txt:rata           3  797.67  265.89 12.5617 0.0001143 ***\ntrat_txt:rata:muestraH 12  594.00   49.50  2.3386 0.0502907 .  \nResiduals              18  381.00   21.17                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n\n\nComo hemos dicho, en realidad la estructura de estos datos es mixta en cuanto a que incluye efectos fijos de los tratamientos y efectos aleatorios. Contiene los efectos aleatorios de la muestra que constituyen las ratas y dentro de ellas el muestreo de porciones de hígado. Así, la prueba *F* para el efecto de tratamientos es de interés pero, en el caso de los factores aleatorios puede valer la pena estimar los *componentes de varianza asociados* con cada etapa de muestreo. Una manera de hacer esto es mediante la función `aov` de **R**, dentro de la cual sólo es necesario designar las columnas que corresponden con *efectos aleatorios* mediante la función `Error()`. Estto funciona bien si el experimento es completo y balanceado.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nratas.aov <- aov(glucogeno ~ tratamiento/rata/muestraH + \n                 Error(rata + muestraH + rata/muestraH), data=ratas)\nsummary(ratas.aov)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nError: rata\n                 Df Sum Sq Mean Sq\ntratamiento:rata  1  413.4   413.4\n\nError: muestraH\n                          Df Sum Sq Mean Sq\ntratamiento:rata:muestraH  2  113.6   56.78\n\nError: rata:muestraH\n                          Df Sum Sq Mean Sq\ntratamiento:rata:muestraH  2  50.89   25.44\n\nError: Within\n                          Df Sum Sq Mean Sq F value   Pr(>F)    \ntratamiento                2 1557.6   778.8  36.793 4.38e-07 ***\ntratamiento:rata           2  384.2   192.1   9.076  0.00188 ** \ntratamiento:rata:muestraH  8  429.6    53.7   2.537  0.04813 *  \nResiduals                 18  381.0    21.2                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}